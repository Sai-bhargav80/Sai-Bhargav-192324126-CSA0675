21.
def generate_max_local(grid):
    n = len(grid)
    max_local = [[0] * (n - 2) for _ in range(n - 2)]
    for i in range(n - 2):
        for j in range(n - 2):
            max_local[i][j] = max(grid[i][j], grid[i][j + 1], grid[i][j + 2],
                                  grid[i + 1][j], grid[i + 1][j + 1], grid[i + 1][j + 2],
                                  grid[i + 2][j], grid[i + 2][j + 1], grid[i + 2][j + 2])
    return max_local
grid = [[9, 9, 8, 1], [5, 6, 2, 6], [8, 2, 6, 4], [6, 2, 2, 2]]
max_local_matrix = generate_max_local(grid)
print(max_local_matrix)
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
21[a].
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
def sort_linked_list(head):
    if not head or not head.next:
        return head
    def merge(left, right):
        if not left or not right:
            return left or right
        if left.val < right.val:
            left.next = merge(left.next, right)
            return left
        else:
            right.next = merge(left, right.next)
            return right
    def split(head):
        if not head or not head.next:
            return head
        slow, fast = head, head.next
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
        mid = slow.next
        slow.next = None
        return merge(split(head), split(mid))
    return split(head)
head = ListNode(4)
head.next = ListNode(2)
head.next.next = ListNode(1)
head.next.next.next = ListNode(3)
sorted_head = sort_linked_list(head)
result = []
while sorted_head:
    result.append(sorted_head.val)
    sorted_head = sorted_head.next
print(result)
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
22.
def count_prefix(words, pref):
    return sum(1 for word in words if word.startswith(pref))
words = ["pay", "attention", "practice", "attend"]
pref = "at"
print(count_prefix(words, pref))  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
22[a]
from collections import defaultdict

def group_anagrams(strs):
    grouped_anagrams = defaultdict(list)
    
    for word in strs:
        key = ''.join(sorted(word))
        grouped_anagrams[key].append(word)
    
    return list(grouped_anagrams.values())

# Example 1
strs1 = ["eat", "tea", "tan", "ate", "nat", "bat"]
print(group_anagrams(strs1))

# Example 2
strs2 = [""]
print(group_anagrams(strs2))
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
23.
def setZeroes(matrix):
    rows, cols = len(matrix), len(matrix[0])
    zero_rows, zero_cols = set(), set()

    for i in range(rows):
        for j in range(cols):
            if matrix[i][j] == 0:
                zero_rows.add(i)
                zero_cols.add(j)

    for i in range(rows):
        for j in range(cols):
            if i in zero_rows or j in zero_cols:
                matrix[i][j] = 0

matrix = [[1, 1, 1], [1, 0, 1], [1, 1, 1]]
setZeroes(matrix)
print(matrix)
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
23[a].
def count_good_triplets(nums1, nums2):
    n = len(nums1)
    count = 0
    for x in range(n):
        for y in range(x+1, n):
            for z in range(y+1, n):
                if nums1[x] < nums1[y] < nums1[z] and nums2[x] < nums2[y] < nums2[z]:
                    count += 1
    return count

# Example
nums1 = [2, 0, 1, 3]
nums2 = [0, 1, 2, 3]
print(count_good_triplets(nums1, nums2))  # Output: 1
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
24.
def intersection(nums1, nums2):
    set1 = set(nums1)
    set2 = set(nums2)
    return list(set1.intersection(set2))

# Example 1
nums1 = [1, 2, 2, 1]
nums2 = [2, 2]
print(intersection(nums1, nums2))  # Output: [2]

# Example 2
nums1 = [4, 9, 5]
nums2 = [9, 4, 9, 8, 4]
print(intersection(nums1, nums2))  # Output: [9, 4]
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
24[a].
def findKthLargest(nums, k):
    return heapq.nlargest(k, nums)[-1]
# Example 1
nums1 = [3, 2, 1, 5, 6, 4]
k1 = 2
output1 = findKthLargest(nums1, k1)
print(output1)  
nums2 = [3, 2, 3, 1, 2, 4, 5, 5, 6]
k2 = 4
output2 = findKthLargest(nums2, k2)
print(output2)  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
25. def countGoodStrings(n, s1, s2, evil):
    MOD = 10**9 + 7
    dp = [[[0 for _ in range(2)] for _ in range(len(evil) + 1)] for _ in range(n + 1)]
    dp[0][0][0] = 1

    for i in range(1, n + 1):
        for j in range(len(evil) + 1):
            for k in range(2):
                for x in range(ord(s1[i - 1]) if k == 0 else ord('a'), ord(s2[i - 1]) + 1 if k == 1 else ord('z') + 1):
                    new_k = k or x < ord(s2[i - 1])
                    new_j = j
                    while new_j and evil[new_j] != chr(x):
                        new_j = dp[new_j][0][0]
                    dp[i][new_j][new_k] += dp[i - 1][j][k]
                    dp[i][new_j][new_k] %= MOD
    res = sum(sum(dp[n][j][k] for k in range(2)) % MOD for j in range(len(evil) + 1)) % MOD
    return res
n = 2
s1 = "aa"
s2 = "da"
evil = "b"
output = countGoodStrings(n, s1, s2, evil)
print(output)  # Output: 51
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
25[a].
from collections import Counter

def majority_element(nums):
    counts = Counter(nums)
    return max(counts, key=counts.get)

# Example 1
nums1 = [3, 2, 3]
print(majority_element(nums1))  

# Example 2
nums2 = [2, 2, 1, 1, 1, 2, 2]
print(majority_element(nums2))  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
26.
def transpose(matrix):
    return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]

# Example 1
matrix1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(transpose(matrix1))  # Output: [[1, 4, 7], [2, 5, 8], [3, 6, 9]]

# Example 2
matrix2 = [[1, 2, 3], [4, 5, 6]]
print(transpose(matrix2))  # Output: [[1, 4], [2, 5], [3, 6]]
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
26[a].
def count_pairs(nums1, nums2, diff):
    n = len(nums1)
    count = 0
    for i in range(n):
        for j in range(i+1, n):
            if nums1[i] - nums1[j] <= nums2[i] - nums2[j] + diff:
                count += 1
    return count
nums1 = [3, 2, 5]
nums2 = [2, 2, 1]
diff = 1
output = count_pairs(nums1, nums2, diff)
print(output)  # Output: 3
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
27.
def findNthDigit(n):
    n -= 1
    for digits in range(1, 11):
        first_num = 10 ** (digits - 1)
        if n < 9 * digits * first_num:
            return int(str(first_num + n // digits)[n % digits])
        n -= 9 * digits * first_num

# Test the function with examples
print(findNthDigit(3))  
print(findNthDigit(11)) 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
27[a].
def longest_nice_substring(s):
    nice_substring = ""
    for i in range(len(s)):
        for j in range(i + 1, len(s) + 1):
            substring = s[i:j]
            if all(substring.lower().count(c) > 0 and substring.upper().count(c) > 0 for c in set(substring.lower())):
                if len(substring) > len(nice_substring):
                    nice_substring = substring
    return nice_substring

# Test the function with the provided example
s = "YazaAay"
print(longest_nice_substring(s))
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
28.
def isPrefixOfWord(sentence, searchWord):
    words = sentence.split()
    for i, word in enumerate(words, 1):
        if word.startswith(searchWord):
            return i
    return -1

# Example
sentence = "i love eating burger"
searchWord = "burg"
output = isPrefixOfWord(sentence, searchWord)
print(output)
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
28[a].
def isPrefixOfWord(sentence, searchWord):
    words = sentence.split()
    for i, word in enumerate(words, 1):
        if word.startswith(searchWord):
            return i
    return -1

# Example
sentence = "i love eating burger"
searchWord = "burg"
output = isPrefixOfWord(sentence, searchWord)
print(output)
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
29.
def min_length_of_array(nums):
    stack = []
    for num in nums:
        if stack and num < stack[-1]:
            stack.pop()
        else:
            stack.append(num)
    return len(stack)

# Example
nums = [1, 2, 3, 4]
print(min_length_of_array(nums))  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
29[a].
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def sortedArrayToBST(nums):
    if not nums:
        return None

    mid = len(nums) // 2
    root = TreeNode(nums[mid])
    root.left = sortedArrayToBST(nums[:mid])
    root.right = sortedArrayToBST(nums[mid + 1:])

    return root
nums = [-10, -3, 0, 5, 9]
result = sortedArrayToBST(nums)
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
30.
def stringMatching(words):
    return [word for word in words if any(other in word for other in words if other != word)]

# Example
words = ["mass", "as", "hero", "superhero"]
print(stringMatching(words))
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
30[a].
def wiggleSort(nums):
    nums.sort()
    half = len(nums[::2])
    nums[::2], nums[1::2] = nums[:half][::-1], nums[half:][::-1]
