

11.def reverse_num(n):
    if n < 10:
        return n
    else:
        return int(str(n % 10) + str(reverse_num(n // 10)))
num = int(input("Enter a number: "))
print(f"Reverse of {num} is {reverse_num(num)}")

12. def is_perfect(n):
    if n < 1:
        return False
    else:
        sum = 0
        for i in range(1, n):
            if n % i == 0:
                sum += i
        return sum == n
num = int(input("Enter a number: "))
if is_perfect(num):
    print(f"{num} is a perfect number.")
else:
    print(f"{num} is not a perfect number.")

13. def linear_search(arr, target):
    for i in range(len(arr)):
        if arr[i] == target:
            return i
    return -1
arr = [1, 2, 3, 4, 5]
target = 3
print(f"Time complexity of linear search: O({len(arr)})")
def binary_search(arr, target):
    low, high = 0, len(arr) - 1
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1
    return -1
arr = [1, 2, 3, 4, 5]
target = 3
print(f"Time complexity of binary search: O(log({len(arr)}))")
def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr
arr = [5, 2, 8, 3, 1]
print(f"Time complexity of bubble sort: O({n}^2)")

14. def non_recursive_algorithm(n):
    if n <= 1:
        return n
    else:
        return n + non_recursive_algorithm(n - 1)
n = 5
print(f"Time complexity of non-recursive algorithm: O({n})")
def recursive_algorithm(n):
    if n <= 1:
        return n
    else:
        return n + recursive_algorithm(n - 1)
n = 5
print(f"Time complexity of recursive algorithm: O({n})")

15.def master_theorem(n):
    if n <= 1:
        return n
    else:
        return n + master_theorem(n - 1)
n = 5
print(f"Time complexity of Master Theorem: O({n})")
def substitution_method(n):
    if n <= 1:
        return n
    else:
        return n + substitution_method(n - 1)
n = 5
print(f"Time complexity of Substitution Method: O({n})")
def iteration_method(n):
    if n <= 1:
        return n
    else:
        return n + iteration_method(n - 1)
n = 5
print(f"Time complexity of Iteration Method: O({n})")
16. def intersection(nums1, nums2):
    return list(set(nums1) & set(nums2))
nums1 = [1, 2, 3, 4, 5]
nums2 = [4, 5, 6, 7, 8]
print(f"Intersection of {nums1} and {nums2} is {intersection(nums1, nums2)}")

17def intersection_with_frequency(nums1, nums2):
    result = []
    for num in set(nums1) & set(nums2):
        count1 = nums1.count(num)
        count2 = nums2.count(num)
        result.extend([num] * min(count1, count2))
    return result
nums1 = [1, 2, 3, 4, 5]
nums2 = [4, 5, 6, 7, 8]
print(f"Intersection of {nums1} and {nums2} with frequency is {intersection_with_frequency(nums1, nums2)}")

18. def sort_array(nums):
    for i in range(len(nums)):
        for j in range(i + 1, len(nums)):
            if nums[i] > nums[j]:
                nums[i], nums[j] = nums[j], nums[i]
    return nums
nums = [5, 2, 8, 3, 1]
print(f"Sorted array is {sort_array(nums)}")

19.def sort_array_with_odd_even(nums):
    odd, even = [], []
    for num in nums:
        if num % 2 == 0:
            even.append(num)
        else:
            odd.append(num)
    odd.sort()
    even.sort()
    result = []
    for num in odd:
        result.append(num)
        if even:
            result.append(even.pop(0))
    return result
nums = [5, 2, 8, 3, 1]
print(f"Sorted array with odd and even elements is {sort_array_with_odd_even(nums)}")

20. def sort_array_with_odd_even(nums):
    odd, even = [], []
    for num in nums:
        if num % 2 == 0:
            even.append(num)
        else:
            odd.append(num)
    odd.sort()
    even.sort()
    result = []
    for num in odd:
        result.append(num)
        if even:
            result.append(even.pop(0))
    return result
nums = [5, 2, 8, 3, 1]
print(f"Sorted array with odd and even elements is {sort_array_with_odd_even(nums)}")

