21.  def smallest_string(s, pairs):
    for a, b in pairs:
        s = list(s)
        s[a], s[b] = s[b], s[a]
        s = ''.join(s)
    return s
s = "dcab"
pairs = [[0, 3], [1, 2]]
print(f"Lexicographically smallest string is {smallest_string(s, pairs)}")

22. def can_break(s1, s2):
    for i in range(len(s1)):
        if s1[i] < s2[i]:
            return True
    return False
s1 = "abc"
s2 = "bca"
print(f"Can {s1} break {s2}? {can_break(s1, s2)}")

23. def replace_question_marks(s):
    for i in range(len(s)):
        if s[i] == '?':
            s = s[:i] + 'a' + s[i + 1:]
    return s
s = "a??b"
print(f"Replaced '?' in {s} with any lowercase English letter: {replace_question_marks(s)}")

24. def remove_alphabet_characters(s):
    result = []
    for char in 'abcdefghijklmnopqrstuvwxyz':
        while char in s:
            s = s.replace(char, '', 1)
    return s
s = "aabcbbca"
print(f"Removed the first occurrence of each alphabet character from 'a' to 'z' in {s}: {remove_alphabet_characters(s)}")

25. def max_subarray_sum(nums):
    max_sum = float('-inf')
    current_sum = 0
    for num in nums:
        current_sum = max(num, current_sum + num)
        max_sum = max(max_sum, current_sum)
    return max_sum
nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]
print(f"Subarray with the largest sum is {max_subarray_sum(nums)}")

26.def build_max_binary_tree(nums):
    if not nums:
        return None
    max_val = max(nums)
    left = build_max_binary_tree([num for num in nums if num < max_val])
    right = build_max_binary_tree([num for num in nums if num > max_val])
    return TreeNode(max_val, left, right)
class TreeNode:
    def _init_(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
nums = [3, 1, 4, 3, 2]
root = build_max_binary_tree(nums)
print(f"Maximum binary tree built from {nums}: {root}")

27. def max_sum_subarray(nums):
    max_sum = float('-inf')
    current_sum = 0
    for num in nums:
        current_sum = max(num, current_sum + num)
        max_sum = max(max_sum, current_sum)
    return max_sum
nums = [1, 2, 3, 4, 5]
print(f"Maximum possible sum of a non-empty subarray of {nums}: {max_sum_subarray(nums)}")

28. def sum_of_answers(nums, queries):
    result = 0
    for query in queries:
        pos, xi = query
        nums[pos] = xi
        max_sum = float('-inf')
        current_sum = 0
        for num in nums:
            current_sum = max(num, current_sum + num)
            max_sum = max(max_sum, current_sum)
        result += max_sum
    return result % (10**9 + 7)
nums = [1, 2, 3, 4, 5]
queries = [[0, 2], [1, 3]]
print(f"Sum of the answers to all queries: {sum_of_answers(nums, queries)}")

29.def k_closest_points(points, k):
    points.sort(key=lambda point: point[0]*2 + point[1]*2)
    return [point for point in points[:k]]
points = [[1, 2], [2, 3], [3, 1], [1, 4], [5, 0]]
k = 3
print(f"K closest points to the origin: {k_closest_points(points, k)}")

30.def find_median(nums1, nums2):
    merged = sorted(nums1 + nums2)
    n = len(merged)
    if n % 2 == 0:
        return (merged[n // 2 - 1] + merged[n // 2]) / 2
    else:
        return merged[n // 2]
nums1 = [1, 3]
nums2 = [2]
print(f"Median of the two sorted arrays: {find_median(nums1, nums2)}")
