1.Finding the maximum and minimum 
Algorithm:
Traverse the array and keep track of the maximum and minimum elements.
Compare each element with the current maximum and minimum.
Update the maximum and minimum if a larger or smaller element is found.
Return the maximum and minimum values after traversing the entire array.
Time complexity: O(n), where n is the size of the array.
Code:
def find_max_min(arr):
    max_val = max(arr)
    min_val = min(arr) 
    return max_val, min_val

# Example usage:
arr = [3, 5, 1, 9, 2, 8, 4]
print(find_max_min(arr))  # Output: (9, 1)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2.Merge sort 
Algorithm:
Divide the input array into two halves.
Recursively sort the left and right halves.
Merge the sorted halves by comparing elements and placing them in order.
Repeat steps 1-3 until the entire array is sorted.
Time complexity: O(n log n), where n is the size of the array.
code:
def merge_sort(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        left_half = arr[:mid]
        right_half = arr[mid:]

        merge_sort(left_half)
        merge_sort(right_half)

        i = j = k = 0

        while i < len(left_half) and j < len(right_half):
            if left_half[i] < right_half[j]:
                arr[k] = left_half[i]
                i += 1
            else:
                arr[k] = right_half[j]
                j += 1
            k += 1

        while i < len(left_half):
            arr[k] = left_half[i]
            i += 1
            k += 1

        while j < len(right_half):
            arr[k] = right_half[j]
            j += 1
            k += 1

arr = [3, 5, 1, 9, 2, 8, 4]
merge_sort(arr)
print(arr)  # Output: [1, 2, 3, 4, 5, 8, 9]
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3.Quick sort
Algorithm:
Select a 'pivot' element from the array.
Partition the other elements into two sub-arrays, according to whether they are less than or greater than the pivot.
Recursively apply the same process to the sub-arrays.
Combine the sorted sub-arrays and the pivot.
Time complexity: O(n log n) on average, but O(n^2) in the worst case.
Code:
def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    else:
        pivot = arr[len(arr) // 2]
        left = [x for x in arr if x < pivot]
        middle = [x for x in arr if x == pivot]
        right = [x for x in arr if x > pivot]
        return quick_sort(left) + middle + quick_sort(right)
arr = [3, 5, 1, 9, 2, 8, 4]
print(quick_sort(arr))  # Output: [1, 2, 3, 4, 5, 8, 9]
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

4.Binary search 
Algorithm:
Initialize low and high pointers to the start and end of the sorted array.
While low is less than or equal to high, calculate the middle index.
Compare the middle element with the target value.
If they match, return the middle index. If the target is less, update high. If the target is greater, update low.
Time complexity: O(log n), where n is the size of the array.
Code:
def binary_search(arr, x):
    low = 0
    high = len(arr) - 1
    mid = 0

    while low <= high:
        mid = (high + low) // 2

        if arr[mid] < x:
            low = mid + 1
        elif arr[mid] > x:
            high = mid - 1
        else:
            return mid
    return -1
arr = [1, 2, 3, 4, 5, 8, 9]
x = 5
print(binary_search(arr, x))  # Output: 4
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

5.Strassens matrix multiplication
Algorithm:
Divide the input matrices into four sub-matrices of equal size.
Compute seven intermediate products using the sub-matrices.
Combine the intermediate products to obtain the final result matrix.
Recursively apply the same process to the sub-matrices.
Time complexity: O(n^2.807), where n is the size of the square matrices.
Code:
import numpy as np

def strassen_multiply(A, B):
    n = len(A)
    if n == 1:
        return A * B
    else:
        mid = n // 2

        A11 = A[:mid, :mid]
        A12 = A[:mid, mid:]
        A21 = A[mid:, :mid]
        A22 = A[mid:, mid:]

        B11 = B[:mid, :mid]
        B12 = B[:mid, mid:]
        B21 = B[mid:, :mid]
        B22 = B[mid:, mid:]

        M1 = strassen_multiply(A11 + A22, B11 + B22)
        M2 = strassen_multiply(A21 + A22, B11)
        M3 = strassen_multiply(A11, B12 - B22)
        M4 = strassen_multiply(A22, B21 - B11)
        M5 = strassen_multiply(A11 + A12, B22)
        M6 = strassen_multiply(A21 - A11, B11 + B12)
        M7 = strassen_multiply(A12 - A22, B21 + B22)

        C11 = M1 + M4 - M5 + M7
        C12 = M3 + M5
        C21 = M2 + M4
        C22 = M1 - M2 + M3 + M6

        C = np.vstack((np.hstack((C11, C12)), np.hstack((C21, C22))))
        return C
A = np.array([[1, 2], [3, 4]])
B = np.array([[5, 6], [7, 8]])
print(strassen_multiply(A, B))
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

6.Karatsuba algorithm for multiplication 
Algorithm:
Split the input numbers into two halves of equal length.
Recursively compute the products of the left halves, the right halves, and the sum of the left and right halves.
Combine the three products using the Karatsuba formula to obtain the final result.
The time complexity of the Karatsuba algorithm is O(n^(log2 3)), which is approximately O(n^1.585).
The Karatsuba algorithm is asymptotically faster than the traditional "grade school" multiplication algorithm, which has a time complexity of O(n^2).
Code:
def karatsuba(x, y):
    if x < 10 or y < 10:
        return x * y

    n = max(len(str(x)), len(str(y)))
    m = n // 2

    x_high, x_low = divmod(x, 10**m)
    y_high, y_low = divmod(y, 10**m)

    z0 = karatsuba(x_low, y_low)
    z1 = karatsuba((x_low + x_high), (y_low + y_high))
    z2 = karatsuba(x_high, y_high)

    return (z2 * 10**(2 * m)) + ((z1 - z2 - z0) * 10**m) + z0

x = 1234
y = 5678
print(karatsuba(x, y))  # Output: 7006652
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

7.Closest pair of points using divide and conquer:
Algorithm:
Divide the set of points into two halves along the x-axis.
Find the closest pair in each half recursively.
Find the closest pair that spans the two halves.
Return the closest pair from steps 2 and 3.
Time complexity: O(n log n), where n is the number of points.
Code:
import math

def distance(p1, p2):
    return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)

def closest_pair(points):
    def closest_pair_rec(pts):
        if len(pts) <= 3:
            return min((distance(p1, p2), (p1, p2)) for i, p1 in enumerate(pts) for p2 in pts[i+1:])

        mid = len(pts) // 2
        mid_x = pts[mid][0]

        (d1, pair1) = closest_pair_rec(pts[:mid])
        (d2, pair2) = closest_pair_rec(pts[mid:])
        d = min(d1, d2)
        best_pair = pair1 if d == d1 else pair2

        in_strip = [p for p in pts if abs(p[0] - mid_x) < d]
        in_strip.sort(key=lambda p: p[1])

        for i in range(len(in_strip)):
            for j in range(i + 1, len(in_strip)):
                if (in_strip[j][1] - in_strip[i][1]) >= d:
                    break
                d_new = distance(in_strip[i], in_strip[j])
                if d_new < d:
                    d = d_new
                    best_pair = (in_strip[i], in_strip[j])
        
        return d, best_pair

    points.sort()
    return closest_pair_rec(points)
points = [(2, 3), (12, 30), (40, 50), (5, 1), (12, 10), (3, 4)]
print(closest_pair(points))  # Output: (1.4142135623730951, ((2, 3), (3, 4)))
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
8.Median of medians:
Algorithm:
Divide the array into groups of size 5.
Calculate the median of each group.
Select the median of the medians as the pivot.
Partition the array around the pivot.
Recursively apply the same process to the sub-arrays.
Code:
def partition(arr, low, high):
    pivot = arr[high]
    i = low - 1
    for j in range(low, high):
        if arr[j] < pivot:
            i += 1
            arr[i], arr[j] = arr[j], arr[i]
    arr[i + 1], arr[high] = arr[high], arr[i + 1]
    return i + 1

def select(arr, left, right, k):
    if left == right:
        return arr[left]
    
    pivot_index = partition(arr, left, right)
    length = pivot_index - left + 1
    
    if length == k:
        return arr[pivot_index]
    elif k < length:
        return select(arr, left, pivot_index - 1, k)
    else:
        return select(arr, pivot_index + 1, right, k - length)

def median_of_medians(arr, k):
    return select(arr, 0, len(arr) - 1, k)

# Example usage:
arr = [12, 3, 5, 7, 4, 19, 26]
k = 3
print(median_of_medians(arr, k))  # Output: 5
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

9.Meet in middle technique:
Algorithm:
Divide the array into two halves.
Calculate the median of each half.
Partition the array around the median of each half.
Combine the two halves to find the closest pair.
Time complexity: O(n log n), where n is the size of the array.
Code:
def subset_sum(arr, target):
    def get_sums(subset):
        sums = set()
        n = len(subset)
        for i in range(1 << n):
            s = 0
            for j in range(n):
                if i & (1 << j):
                    s += subset[j]
            sums.add(s)
        return sums

    n = len(arr)
    left = arr[:n//2]
    right = arr[n//2:]

    left_sums = get_sums(left)
    right_sums = get_sums(right)

    for s in left_sums:
        if target - s in right_sums:
            return True
    return False
arr = [3, 34, 4, 12, 5, 2]
target = 9
print(subset_sum(arr, target))  # Output: True (because 4 + 5 = 9)
