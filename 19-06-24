1.
Algorithm:
1. *Initialize a Min-Heap*: Use a min-heap to keep track of the smallest current node from each linked-list.
2. *Push Initial Nodes*: Push the head of each linked-list into the min-heap.
3. *Extract Minimum*: Pop the smallest node from the heap and add it to the resulting linked-list.
4. *Push Next Node*: Push the next node from the extracted nodeâ€™s linked-list into the heap.
5. *Repeat*: Continue until the heap is empty.
6. *Return*: Return the head of the merged linked-list.
code:
from heapq import heappush, heappop
from typing import List, Optional
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
    def __lt__(self, other):
        return self.val < other.val
def mergeKLists(lists: List[Optional[ListNode]]) -> Optional[ListNode]:
    min_heap = []
    for i, l in enumerate(lists):
        if l:
            heappush(min_heap, (l.val, i, l))
    dummy = ListNode()
    current = dummy
    while min_heap:
        val, i, node = heappop(min_heap)
        current.next = node
        current = current.next
        if node.next:
            heappush(min_heap, (node.next.val, i, node.next))
    return dummy.next
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2.
Algorithm:
1. **Sort arr2**: To quickly find potential replacements that maintain the increasing order.
2. *DP Table*: Use a dictionary dp where the keys are possible values in the strictly increasing sequence and the values are the minimum operations needed to achieve that value.
3. **Iterate through arr1**:
   - *Update DP Table*: For each element in arr1, update the DP table considering both keeping the current element and replacing it with an element from arr2.
   - **Binary Search in arr2**: Use binary search to efficiently find the smallest larger element in arr2 that can replace the current element in arr1.
4. *Find the Result*: The minimum value in the DP table after processing all elements of arr1 represents the minimum operations required. If the DP table is empty at the end, return -1 (no way to make arr1 strictly increasing).

code:
from bisect import bisect_right
from collections import defaultdict
from typing import List
def makeArrayIncreasing(arr1: List[int], arr2: List[int]) -> int:
    arr2.sort()
    dp = {-1: 0}  
    for val in arr1:
        new_dp = defaultdict(lambda: float('inf'))
        for key in dp:
            if val > key:
                new_dp[val] = min(new_dp[val], dp[key])
            loc = bisect_right(arr2, key)
            if loc < len(arr2):
                new_dp[arr2[loc]] = min(new_dp[arr2[loc]], dp[key] + 1)
        dp = new_dp
    if dp:
        return min(dp.values())
    else:
        return -1
arr1 = [1, 5, 3, 6, 7]
arr2 = [1, 3, 2, 4]
print(makeArrayIncreasing(arr1, arr2))
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3.
Algorithm:
1. **Ensure nums1 is the smaller array**: This simplifies the binary search logic.
2. *Binary Search on the Smaller Array*:
   - Partition the smaller array and compute the corresponding partition in the larger array.
   - Ensure the partitions are valid: the maximum element on the left side is less than or equal to the minimum element on the right side.
   - Adjust the binary search range based on the partition comparison results.
3. *Compute Median*:
   - If the total number of elements is odd, the median is the maximum element on the left side.
   - If the total number of elements is even, the median is the average of the maximum element on the left side and the minimum element on the right side.

Code:
from typing import List
def findMedianSortedArrays(nums1: List[int], nums2: List[int]) -> float:
    if len(nums1) > len(nums2):
        nums1, nums2 = nums2, nums1
    m, n = len(nums1), len(nums2)
    imin, imax, half_len = 0, m, (m + n + 1) // 2
    while imin <= imax:
        i = (imin + imax) // 2
        j = half_len - i
        if i < m and nums1[i] < nums2[j-1]:
            imin = i + 1
        elif i > 0 and nums1[i-1] > nums2[j]:
            imax = i - 1
        else:
            if i == 0: max_of_left = nums2[j-1]
            elif j == 0: max_of_left = nums1[i-1]
            else: max_of_left = max(nums1[i-1], nums2[j-1])
            if (m + n) % 2 == 1:
                return max_of_left
            if i == m: min_of_right = nums2[j]
            elif j == n: min_of_right = nums1[i]
            else: min_of_right = min(nums1[i], nums2[j])
            return (max_of_left + min_of_right) / 2.0
nums1 = [1, 3]
nums2 = [2]
print(findMedianSortedArrays(nums1, nums2))  # Output: 2.0
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4.
Algorithm:
1. *Initial Check*: If b is already a substring of a, then return 1.
2. *Calculate Minimum Repeats*: Determine the minimum number of times a needs to be repeated so that its length is at least as long as b.
3. *Check Substring*: Check if b is a substring of a repeated the calculated minimum number of times or one additional repeat.
4. *Return Result*: If b is found as a substring in the repeated string, return the number of repeats; otherwise, return -1.
Code:
def repeatedStringMatch(a: str, b: str) -> int:
    if b in a:
        return 1
    min_repeats = -(-len(b) // len(a))  
    if b in (a * min_repeats):
        return min_repeats
    if b in (a * (min_repeats + 1)):
        return min_repeats + 1
    return -1
a = "abcd"
b = "cdabcdab"
print(repeatedStringMatch(a, b))  # Output: 3
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5.
Algorithm:
1. *Create a Hash Map*: Store all pairs of indices and their sums in a hash map.
2. *Find Pairs of Pairs*: For each pair of numbers, check if there is another pair of numbers that together with the first pair sums up to the target.
3. *Check Distinct Indices*: Ensure that all four indices are distinct.
4. *Return the Result*: Return the first valid quadruplet found or an empty list if none is found.
 Code:
from typing import List
def fourSum(nums: List[int], target: int) -> List[List[int]]:
    n = len(nums)
    if n < 4:
        return []
    pair_sums = {}
    for i in range(n):
        for j in range(i + 1, n):
            current_sum = nums[i] + nums[j]
            if current_sum in pair_sums:
                pair_sums[current_sum].append((i, j))
            else:
                pair_sums[current_sum] = [(i, j)]
    for i in range(n):
        for j in range(i + 1, n):
            current_sum = nums[i] + nums[j]
            complement = target - current_sum
            if complement in pair_sums:
                for pair in pair_sums[complement]:
                    # Ensure all indices are distinct
                    if pair[0] != i and pair[0] != j and pair[1] != i and pair[1] != j:
                        return [nums[i], nums[j], nums[pair[0]], nums[pair[1]]]
    return []
nums = [1, 0, -1, 0, -2, 2]
target = 0
print(fourSum(nums, target))  # Output: [1, 0, -1, 0] or any other valid quadruplet summing to 0
-------------------------------------------------------------------------------------------------------------------------------------------------------
6.
algorithm:
Initialize a counter count to zero and a candidate element candidate to None.
Traversal: Iterate through the input array nums. For each element num:
If count is zero, set candidate to num and increment count to one.
If candidate is equal to num, increment count by one.
If candidate is not equal to num, decrement count by one.
Return: Return the candidate element, which is the majority element.
This algorithm is known as the Boyer-Moore Majority Vote algorithm. 
It works by essentially keeping a running tally of the majority element as it iterates through the array. 
If the tally ever reaches zero, it resets the candidate to the current element.
This ensures that the candidate is the majority element at the end of the iteration.
code:
def majorityElement(nums):
    count = 0
    candidate = None
    for num in nums:
        if count == 0:
            candidate = num
            count = 1
        elif candidate == num:
            count += 1
        else:
            count -= 1
    return candidate
nums = [3, 2, 3]
print(majorityElement(nums))
--------------------------------------------------------------------------------------------------------------------------------------------------------------
7.
algorithm:
f the linked list is empty or has only one node, return the head as is.
Find the Middle: Use the "slow" and "fast" pointer technique to find the middle of the linked list. 
The "slow" pointer moves one step at a time, while the "fast" pointer moves two steps at a time. When the "fast" pointer reaches the end, the "slow" pointer will be at the middle.
Split the List: Split the linked list into two halves by setting the next pointer of the middle node to None.
Recursive Sort: Recursively sort the left and right halves of the linked list using the sortList function.
Merge the Sorted Halves: Merge the two sorted halves using the merge function. This function takes two sorted linked lists and merges them into a single sorted linked list.
The time complexity of this solution is O(n log n), where n is the number of nodes in the linked list.
This is because the algorithm uses a divide-and-conquer approach, which involves recursively sorting the left and right halves of the list, 
and then merging the sorted halves. The space complexity is O(log n) due to the recursive calls on the call stack
code:
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
def sortList(head):
    if not head or not head.next:
        return head
    slow, fast = head, head.next
    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next
    middle = slow.next
    slow.next = None
    left = sortList(head)
    right = sortList(middle)
    return merge(left, right)
def merge(left, right):
    dummy = ListNode()
    curr = dummy
    while left and right:
        if left.val < right.val:
            curr.next = left
            left = left.next
        else:
            curr.next = right
            right = right.next
        curr = curr.next
    if left:
        curr.next = left
    if right:
        curr.next = right
    return dummy.next
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
8
algorithm:
Create a defaultdict named anagrams to store the anagrams. The default value for each key is an empty list.
Traversal: Iterate through each string word in the input array strs.
Sorting the Word: Sort the characters in the word to create a sorted version of the word. This ensures that all anagrams of the same word will have the same sorted version.
Grouping Anagrams: Use the sorted version of the word as a key in the anagrams dictionary. Append the original word to the list of values for this key.
Return: Return the values of the anagrams dictionary as a list. Each value is a list of anagrams.
This algorithm ensures that all anagrams are grouped together by sorting the characters in each word and using the sorted version as a key in the dictionary. 
The time complexity is O(nm log m), where n is the number of strings and m is the maximum length of a string. The space complexity is O(nm), as we need to store the sorted versions of all strings.
code:
from collections import defaultdict
def groupAnagrams(strs):
    anagrams = defaultdict(list)
    for word in strs:
        sorted_word = "".join(sorted(word))
        anagrams[sorted_word].append(word)
    return list(anagrams.values())
strs = ["eat", "tea", "tan", "ate", "nat", "bat"]
print(groupAnagrams(strs)) 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
9.
algorithm:
Initialize a variable count to keep track of the number of good triplets.
Nested Loops: Use three nested loops to iterate through all possible triplets (i, j, k) where i < j < k.
Checking Conditions: For each triplet (i, j, k), check if the following conditions are met:
The indices of the elements in nums1 are in increasing order: nums1.index(nums1[i]) < nums1.index(nums1[j]) < nums1.index(nums1[k]).
The indices of the elements in nums2 are in increasing order: nums2.index(nums2[i]) < nums2.index(nums2[j]) < nums2.index(nums2[k]).
Incrementing Count: If both conditions are met, increment the count variable.
Return: Return the final value of count, which represents the total number of good triplets.
The time complexity of this solution is O(n^3), where n is the length of the input arrays nums1 and nums2.
This is because we use three nested loops to iterate through all possible triplets. The space complexity is O(1), as we only use a constant amount of extra space.
code:
def countGoodTriplets(nums1, nums2):
    n = len(nums1)
    count = 0
    for i in range(n):
        for j in range(i + 1, n):
            for k in range(j + 1, n):
                if (nums1.index(nums1[i]) < nums1.index(nums1[j]) < nums1.index(nums1[k]) and
                    nums2.index(nums2[i]) < nums2.index(nums2[j]) < nums2.index(nums2[k])):
                    count += 1
    return count
nums1 = [2, 0, 1, 3]
nums2 = [0, 1, 2, 3]
print(countGoodTriplets(nums1, nums2))
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
10
algorithm:
Initialize an empty list result to store the k largest elements.
Heapify: Use the heapq.nlargest() function to create a min-heap from the input array nums. This function returns the k largest elements from the array.
Return: Return the last element of the result list, which is the kth largest element in the array.
The time complexity of this solution is O(n log k), where n is the length of the input array nums and k is the value of the parameter. 
This is because the heapq.nlargest() function uses a heap data structure to find the k largest elements, which has a time complexity of O(n log k). 
The space complexity is O(k), as we need to store the k largest elements in the result list.
code:
import heapq
def findKthLargest(nums, k):
    return heapq.nlargest(k, nums)[-1]
nums = [3, 2, 1, 5, 6, 4]
k = 2
print(findKthLargest(nums, k)) 
nums = [3, 2, 3, 1, 2, 4, 5, 5, 6]
k = 4
print(findKthLargest(nums, k))
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
