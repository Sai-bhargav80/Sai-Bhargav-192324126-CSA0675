1. Odd String Difference   
   def oddString(words):
    n = len(words[0])
    diffs = []
    for word in words:
        diff = [ord(word[i+1]) - ord(word[i]) for i in range(n-1)]
        diffs.append(diff)    
    for i in range(len(diffs)):
        if diffs[i] != diffs[0] and diffs[i] != diffs[-1]:
            return words[i]    
    return words[-1]

2. Words Within Two Edits of Dictionary    
   def twoEditWords(queries, dictionary):
    result = []
    for query in queries:
        for word in dictionary:
            diff = sum(1 for i in range(len(query)) if query[i] != word[i])
            if diff <= 2:
                result.append(query)
                break
    return result

3.  Destroy Sequential Targets   
  def destroyTargets(nums, space):
    nums.sort()
    max_count = 0
    min_seed = float('inf')    
    for seed in nums:
        count = 0
        for target in nums:
            if (target - seed) % space == 0:
                count += 1
        if count > max_count or (count == max_count and seed < min_seed):
            max_count = count
            min_seed = seed    
    return min_seed

4.  Minimum Addition to Make Integer Beautiful
   def makeIntegerBeautiful(n, target):
    digits = list(str(n))
    digit_sum = sum(int(d) for d in digits)    
    if digit_sum <= target:
        return 0    
    add = 0
    while digit_sum > target:
        add += 10 - int(digits[-1])
        digits.pop()
        digit_sum -= int(digits[-1]) if digits else 0    
    return add

5. Sort Array by Moving Items to Empty Space
   def minimumOperations(nums):
    n = len(nums)
    empty = nums.index(0)
    operations = 0    
    for i in range(empty):
        if nums[i] != i+1:
            for j in range(i+1, empty):
                if nums[j] == i+1:
                    nums[j], nums[empty] = nums[empty], nums[j]
                    empty = j
                    operations += 1
                    break    
    for i in range(empty+1, n):
        if nums[i] != i:
            for j in range(i+1, n):
                if nums[j] == i:
                    nums[j], nums[empty] = nums[empty], nums[j]
                    empty = j
                    operations += 1
                    break    
    return operations

6. Apply Operations to an Array

  def applyOperations(nums):
    n = len(nums)
    
    for i in range(n-1):
        if nums[i] == nums[i+1]:
            nums[i] *= 2
            nums[i+1] = 0
    
    zeros = nums.count(0)
    nums = [num for num in nums if num != 0]
    nums.extend([0] * zeros)
    
    return nums
