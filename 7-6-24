1. Write a program to find the reverse of a given number using recursive.
def reverse_num(n):
    if n < 10:
        return n
    else:
        return int(str(n % 10) + str(reverse_num(n // 10)))
num = int(input("Enter a number: "))
print(f"Reverse of {num} is {reverse_num(num)}")

2. Write a program to find the perfect number. 

 def is_perfect(n):
    if n < 1:
        return False
    else:
        sum = 0
        for i in range(1, n):
            if n % i == 0:
                sum += i
        return sum == n
num = int(input("Enter a number: "))
if is_perfect(num):
    print(f"{num} is a perfect number.")
else:
    print(f"{num} is not a perfect number.")

3. Write C program that demonstrates the usage of these notations by analyzing the time complexity of some example algorithms.

def linear_search(arr, target):
    for i in range(len(arr)):
        if arr[i] == target:
            return i
    return -1
arr = [1, 2, 3, 4, 5]
target = 3
print(f"Time complexity of linear search: O({len(arr)})")
def binary_search(arr, target):
    low, high = 0, len(arr) - 1
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1
    return -1
arr = [1, 2, 3, 4, 5]
target = 3
print(f"Time complexity of binary search: O(log({len(arr)}))")
def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr
arr = [5, 2, 8, 3, 1]
print(f"Time complexity of bubble sort: O({n}^2)")

4. Write C programs that demonstrate the mathematical analysis of non-recursive and recursive algorithms.

def non_recursive_algorithm(n):
    if n <= 1:
        return n
    else:
        return n + non_recursive_algorithm(n - 1)
n = 5
print(f"Time complexity of non-recursive algorithm: O({n})")
def recursive_algorithm(n):
    if n <= 1:
        return n
    else:
        return n + recursive_algorithm(n - 1)
n = 5
print(f"Time complexity of recursive algorithm: O({n})")

5. Write C programs for solving recurrence relations using the Master Theorem, Substitution Method, and Iteration Method will demonstrate how to calculate the time complexity of an example recurrence relation using the specified technique.

def master_theorem(n):
    if n <= 1:
        return n
    else:
        return n + master_theorem(n - 1)
n = 5
print(f"Time complexity of Master Theorem: O({n})")
def substitution_method(n):
    if n <= 1:
        return n
    else:
        return n + substitution_method(n - 1)
n = 5
print(f"Time complexity of Substitution Method: O({n})")
def iteration_method(n):
    if n <= 1:
        return n
    else:
        return n + iteration_method(n - 1)
n = 5
print(f"Time complexity of Iteration Method: O({n})")

6. Given two integer arrays nums1 and nums2, return an array of their Intersection. Each element in the result must be unique and you may return the result in any order.

def intersection(nums1, nums2):
    return list(set(nums1) & set(nums2))
nums1 = [1, 2, 3, 4, 5]
nums2 = [4, 5, 6, 7, 8]
print(f"Intersection of {nums1} and {nums2} is {intersection(nums1, nums2)}")

7. Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.

def intersection_with_frequency(nums1, nums2):
    result = []
    for num in set(nums1) & set(nums2):
        count1 = nums1.count(num)
        count2 = nums2.count(num)
        result.extend([num] * min(count1, count2))
    return result
nums1 = [1, 2, 3, 4, 5]
nums2 = [4, 5, 6, 7, 8]
print(f"Intersection of {nums1} and {nums2} with frequency is {intersection_with_frequency(nums1, nums2)}")

8. Given an array of integers nums, sort the array in ascending order and return it.You must solve the problem without using any built-in functions in O(nlog(n)) time complexity and with the smallest space complexity possible.

 def sort_array(nums):
    for i in range(len(nums)):
        for j in range(i + 1, len(nums)):
            if nums[i] > nums[j]:
                nums[i], nums[j] = nums[j], nums[i]
    return nums
nums = [5, 2, 8, 3, 1]
print(f"Sorted array is {sort_array(nums)}")

9. Given an array of integers nums, half of the integers in nums are odd, and the other half are even.

def sort_array_with_odd_even(nums):
    odd, even = [], []
    for num in nums:
        if num % 2 == 0:
            even.append(num)
        else:
            odd.append(num)
    odd.sort()
    even.sort()
    result = []
    for num in odd:
        result.append(num)
        if even:
            result.append(even.pop(0))
    return result
nums = [5, 2, 8, 3, 1]
print(f"Sorted array with odd and even elements is {sort_array_with_odd_even(nums)}")

10. Sort the array so that whenever nums[i] is odd, i is odd, and whenever nums[i] is even, i is even. Return any answer array that satisfies this condition.

def sort_array_with_odd_even(nums):
    odd, even = [], []
    for num in nums:
        if num % 2 == 0:
            even.append(num)
        else:
            odd.append(num)
    odd.sort()
    even.sort()
    result = []
    for num in odd:
        result.append(num)
        if even:
            result.append(even.pop(0))
    return result
nums = [5, 2, 8, 3, 1]
print(f"Sorted array with odd and even elements is {sort_array_with_odd_even(nums)}")

