1.	You are given a string s, and an array of pairs of indices in the string pairs where pairs[i] = [a, b] indicates 2 indices(0-indexed) of the string.You can swap the characters at any pair of indices in the given pairs any number of times. Return the lexicographically smallest string that s can be changed to after using the swaps.

def smallest_string(s, pairs):
    for a, b in pairs:
        s = list(s)
        s[a], s[b] = s[b], s[a]
        s = ''.join(s)
    return s
s = "dcab"
pairs = [[0, 3], [1, 2]]
print(f"Lexicographically smallest string is {smallest_string(s, pairs)}")

2.	Given two strings: s1 and s2 with the same size, check if some permutation of string s1 can break some permutation of string s2 or vice-versa. In other words s2 can break s1 or vice-versa. A string x can break string y (both of size n) if x[i] >= y[i] (in alphabetical order) for all i between 0 and n-1.

def can_break(s1, s2):
    for i in range(len(s1)):
        if s1[i] < s2[i]:
            return True
    return False
s1 = "abc"
s2 = "bca"
print(f"Can {s1} break {s2}? {can_break(s1, s2)}")

3.	You are given a string s. s[i] is either a lowercase English letter or '?'. For a string t having length m containing only lowercase English letters, we define the function cost(i) for an index i as the number of characters equal to t[i] that appeared before it, i.e. in the range [0, i - 1]. The value of t is the sum of cost(i) for all indices i. For example, for the string t = "aab":
cost(0) = 0
cost(1) = 1
cost(2) = 0
Hence, the value of "aab" is 0 + 1 + 0 = 1. Your task is to replace all occurrences of '?' in s with any lowercase English letter so at the value of s is minimized.

def replace_question_marks(s):
    for i in range(len(s)):
        if s[i] == '?':
            s = s[:i] + 'a' + s[i + 1:]
    return s
s = "a??b"
print(f"Replaced '?' in {s} with any lowercase English letter: {replace_question_marks(s)}")

4.	You are given a string s. Consider performing the following operation until s becomes empty: For every alphabet character from 'a' to 'z', remove the first occurrence of that character in s (if it exists). For example, let initially s = "aabcbbca". We do the following operations: Remove the underlined characters s = "aabcbbca". The resulting string is s = "abbca". Remove the underlined characters s = "abbca". The resulting string is s = "ba". Remove the underlined characters s = "ba". The resulting string is s = "". Return the value of the string s right before applying the last operation. In the example above, answer is "ba".

 def remove_alphabet_characters(s):
    result = []
    for char in 'abcdefghijklmnopqrstuvwxyz':
        while char in s:
            s = s.replace(char, '', 1)
    return s
s = "aabcbbca"
print(f"Removed the first occurrence of each alphabet character from 'a' to 'z' in {s}: {remove_alphabet_characters(s)}")

5.	Given an integer array nums, find the  subarray with the largest sum, and return its sum.

 def max_subarray_sum(nums):
    max_sum = float('-inf')
    current_sum = 0
    for num in nums:
        current_sum = max(num, current_sum + num)
        max_sum = max(max_sum, current_sum)
    return max_sum
nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]
print(f"Subarray with the largest sum is {max_subarray_sum(nums)}")

6.	You are given an integer array nums with no duplicates. A maximum binary tree can be built recursively from nums using the following algorithm: Create a root node whose value is the maximum value in nums. Recursively build the left subtree on the subarray prefix to the left of the maximum value. Recursively build the right subtree on the subarray suffix to the right of the maximum value. Return the maximum binary tree built from nums.

def build_max_binary_tree(nums):
    if not nums:
        return None
    max_val = max(nums)
    left = build_max_binary_tree([num for num in nums if num < max_val])
    right = build_max_binary_tree([num for num in nums if num > max_val])
    return TreeNode(max_val, left, right)
class TreeNode:
    def _init_(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
nums = [3, 1, 4, 3, 2]
root = build_max_binary_tree(nums)
print(f"Maximum binary tree built from {nums}: {root}")

7.	Given a circular integer array nums of length n, return the maximum possible sum of a non-empty subarray of nums.A circular array means the end of the array connects to the beginning of the array. Formally, the next element of nums[i] is nums[(i + 1) % n] and the previous element of nums[i] is nums[(i - 1 + n) % n].A subarray may only include each element of the fixed buffer nums at most once. Formally, for a subarray nums[i], nums[i + 1], ..., nums[j], there does not exist i <= k1, k2 <= j with k1 % n == k2 % n.

def max_sum_subarray(nums):
    max_sum = float('-inf')
    current_sum = 0
    for num in nums:
        current_sum = max(num, current_sum + num)
        max_sum = max(max_sum, current_sum)
    return max_sum
nums = [1, 2, 3, 4, 5]
print(f"Maximum possible sum of a non-empty subarray of {nums}: {max_sum_subarray(nums)}")

8.	You are given an array nums consisting of integers. You are also given a 2D array queries, where queries[i] = [posi, xi].For query i, we first set nums[posi] equal to xi, then we calculate the answer to query i which is the maximum sum of a subsequence of nums where no two adjacent elements are selected. Return the sum of the answers to all queries. Since the final answer may be very large, return it modulo 109 + 7. A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.

 def sum_of_answers(nums, queries):
    result = 0
    for query in queries:
        pos, xi = query
        nums[pos] = xi
        max_sum = float('-inf')
        current_sum = 0
        for num in nums:
            current_sum = max(num, current_sum + num)
            max_sum = max(max_sum, current_sum)
        result += max_sum
    return result % (10**9 + 7)
nums = [1, 2, 3, 4, 5]
queries = [[0, 2], [1, 3]]
print(f"Sum of the answers to all queries: {sum_of_answers(nums, queries)}")

9. Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane and an integer k, return the k closest points to the origin (0, 0).The distance between two points on the X-Y plane is the Euclidean distance (i.e., âˆš(x1 - x2)2 + (y1 - y2)2). You may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in).

def k_closest_points(points, k):
    points.sort(key=lambda point: point[0]*2 + point[1]*2)
    return [point for point in points[:k]]
points = [[1, 2], [2, 3], [3, 1], [1, 4], [5, 0]]
k = 3
print(f"K closest points to the origin: {k_closest_points(points, k)}")

10. Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).
def find_median(nums1, nums2):
    merged = sorted(nums1 + nums2)
    n = len(merged)
    if n % 2 == 0:
        return (merged[n // 2 - 1] + merged[n // 2]) / 2
    else:
        return merged[n // 2]
nums1 = [1, 3]
nums2 = [2]
print(f"Median of the two sorted arrays: {find_median(nums1, nums2)}")
